From a09ee1da4f85f92aa6baabea57518234194fea81 Mon Sep 17 00:00:00 2001
From: Andy Nichols <andy.nichols@nokia.com>
Date: Mon, 28 May 2012 16:42:39 +0200
Subject: [PATCH] [V8] Add support for using armv6 vfp2 instructions

This is needed when building for armv6 with the
hardfloat ABI.  Config tests have been added to
detect VFP3 and VFP2 instruction support.

Change-Id: If6c5fcf840463bfc98bab564f5357b754b39a20f
---
 config.tests/vfp2/vfp2.cpp                     | 48 ++++++++++++++++++++++++++
 config.tests/vfp2/vfp2.pro                     | 15 ++++++++
 config.tests/vfp3/vfp3.cpp                     | 48 ++++++++++++++++++++++++++
 config.tests/vfp3/vfp3.pro                     | 15 ++++++++
 qtjsbackend.pro                                |  2 ++
 src/3rdparty/v8/src/arm/assembler-arm.cc       | 15 ++++----
 src/3rdparty/v8/src/arm/code-stubs-arm.cc      |  8 ++---
 src/3rdparty/v8/src/arm/macro-assembler-arm.cc |  8 ++---
 src/3rdparty/v8/src/v8globals.h                |  1 +
 src/v8/v8.pri                                  | 11 ++++--
 sync.profile                                   |  7 ++++
 11 files changed, 161 insertions(+), 17 deletions(-)
 create mode 100644 config.tests/vfp2/vfp2.cpp
 create mode 100644 config.tests/vfp2/vfp2.pro
 create mode 100644 config.tests/vfp3/vfp3.cpp
 create mode 100644 config.tests/vfp3/vfp3.pro

diff --git a/config.tests/vfp2/vfp2.cpp b/config.tests/vfp2/vfp2.cpp
new file mode 100644
index 0000000..7b36d5c
--- /dev/null
+++ b/config.tests/vfp2/vfp2.cpp
@@ -0,0 +1,48 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the config.tests of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+int main(int, char**)
+{
+    // pretend to do some floating point math, but none of this is required
+    double a = 0.03, b = 16.05;
+    double c = a * b;
+    return (int)c;
+}
diff --git a/config.tests/vfp2/vfp2.pro b/config.tests/vfp2/vfp2.pro
new file mode 100644
index 0000000..fd91f41
--- /dev/null
+++ b/config.tests/vfp2/vfp2.pro
@@ -0,0 +1,15 @@
+CONFIG -= x11 qt
+SOURCES = vfp2.cpp
+OBJECTS_DIR = obj
+QMAKE_CXXFLAGS += -MD
+
+equals(QT_ARCH, "arm"):unix {
+    test.commands = readelf -A vfp2 | grep -q \'Tag_FP_arch: VFPv2\'
+    test.depends = vfp2
+    QMAKE_EXTRA_TARGETS += test
+
+    default.target = all
+    default.depends += test
+    QMAKE_EXTRA_TARGETS += default
+}
+
diff --git a/config.tests/vfp3/vfp3.cpp b/config.tests/vfp3/vfp3.cpp
new file mode 100644
index 0000000..7b36d5c
--- /dev/null
+++ b/config.tests/vfp3/vfp3.cpp
@@ -0,0 +1,48 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the config.tests of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+int main(int, char**)
+{
+    // pretend to do some floating point math, but none of this is required
+    double a = 0.03, b = 16.05;
+    double c = a * b;
+    return (int)c;
+}
diff --git a/config.tests/vfp3/vfp3.pro b/config.tests/vfp3/vfp3.pro
new file mode 100644
index 0000000..adc5f46
--- /dev/null
+++ b/config.tests/vfp3/vfp3.pro
@@ -0,0 +1,15 @@
+CONFIG -= x11 qt
+SOURCES = vfp3.cpp
+OBJECTS_DIR = obj
+QMAKE_CXXFLAGS += -MD
+
+equals(QT_ARCH, "arm"):unix {
+    test.commands = readelf -A vfp3 | grep -q \'Tag_FP_arch: VFPv3\'
+    test.depends = vfp3
+    QMAKE_EXTRA_TARGETS += test
+
+    default.target = all
+    default.depends += test
+    QMAKE_EXTRA_TARGETS += default
+}
+
diff --git a/qtjsbackend.pro b/qtjsbackend.pro
index f2bd8e7..62179b8 100644
--- a/qtjsbackend.pro
+++ b/qtjsbackend.pro
@@ -1,4 +1,6 @@
 load(configure)
 qtCompileTest(hardfloat)
+qtCompileTest(vfp2)
+qtCompileTest(vfp3)
 
 load(qt_parts)
diff --git a/src/3rdparty/v8/src/arm/assembler-arm.cc b/src/3rdparty/v8/src/arm/assembler-arm.cc
index ec28da4..922eec4 100644
--- a/src/3rdparty/v8/src/arm/assembler-arm.cc
+++ b/src/3rdparty/v8/src/arm/assembler-arm.cc
@@ -52,7 +52,7 @@ unsigned CpuFeatures::found_by_runtime_probing_ = 0;
 
 
 // Get the CPU features enabled by the build. For cross compilation the
-// preprocessor symbols CAN_USE_ARMV7_INSTRUCTIONS and CAN_USE_VFP_INSTRUCTIONS
+// preprocessor symbols CAN_USE_ARMV7_INSTRUCTIONS and CAN_USE_VFP3_INSTRUCTIONS
 // can be defined to enable ARMv7 and VFPv3 instructions when building the
 // snapshot.
 static uint64_t CpuFeaturesImpliedByCompiler() {
@@ -60,9 +60,12 @@ static uint64_t CpuFeaturesImpliedByCompiler() {
 #ifdef CAN_USE_ARMV7_INSTRUCTIONS
   answer |= 1u << ARMv7;
 #endif  // def CAN_USE_ARMV7_INSTRUCTIONS
-#ifdef CAN_USE_VFP_INSTRUCTIONS
-  answer |= 1u << VFP3 | 1u << ARMv7;
-#endif  // def CAN_USE_VFP_INSTRUCTIONS
+#ifdef CAN_USE_VFP3_INSTRUCTIONS
+  answer |= 1u << VFP3 | 1u << VFP2 | 1u << ARMv7;
+#endif  // def CAN_USE_VFP3_INSTRUCTIONS
+#ifdef CAN_USE_VFP2_INSTRUCTIONS
+  answer |= 1u << VFP2;
+#endif // def CAN_USE_VFP2_INSTRUCTIONS
 
 #ifdef __arm__
   // If the compiler is allowed to use VFP then we can use VFP too in our code
@@ -1742,7 +1745,7 @@ void Assembler::vstr(const DwVfpRegister src,
   // Instruction details available in ARM DDI 0406A, A8-786.
   // cond(31-28) | 1101(27-24)| U000(23-20) | | Rbase(19-16) |
   // Vsrc(15-12) | 1011(11-8) | (offset/4)
-  ASSERT(CpuFeatures::IsEnabled(VFP3));
+  ASSERT(CpuFeatures::IsEnabled(VFP3) || CpuFeatures::IsEnabled(VFP2));
   int u = 1;
   if (offset < 0) {
     offset = -offset;
@@ -2028,7 +2031,7 @@ void Assembler::vmov(const DwVfpRegister dst,
   // Instruction details available in ARM DDI 0406A, A8-646.
   // cond(31-28) | 1100(27-24)| 010(23-21) | op=0(20) | Rt2(19-16) |
   // Rt(15-12) | 1011(11-8) | 00(7-6) | M(5) | 1(4) | Vm
-  ASSERT(CpuFeatures::IsEnabled(VFP3));
+  ASSERT(CpuFeatures::IsEnabled(VFP3) || CpuFeatures::IsEnabled(VFP2));
   ASSERT(!src1.is(pc) && !src2.is(pc));
   emit(cond | 0xC*B24 | B22 | src2.code()*B16 |
        src1.code()*B12 | 0xB*B8 | B4 | dst.code());
diff --git a/src/3rdparty/v8/src/arm/code-stubs-arm.cc b/src/3rdparty/v8/src/arm/code-stubs-arm.cc
index bea3169..bc7b4c5 100644
--- a/src/3rdparty/v8/src/arm/code-stubs-arm.cc
+++ b/src/3rdparty/v8/src/arm/code-stubs-arm.cc
@@ -986,7 +986,7 @@ void FloatingPointHelper::CallCCodeForDoubleOperation(
   __ push(lr);
   __ PrepareCallCFunction(0, 2, scratch);
   if (masm->use_eabi_hardfloat()) {
-    CpuFeatures::Scope scope(VFP3);
+    CpuFeatures::Scope scope(VFP2);
     __ vmov(d0, r0, r1);
     __ vmov(d1, r2, r3);
   }
@@ -998,7 +998,7 @@ void FloatingPointHelper::CallCCodeForDoubleOperation(
   // Store answer in the overwritable heap number. Double returned in
   // registers r0 and r1 or in d0.
   if (masm->use_eabi_hardfloat()) {
-    CpuFeatures::Scope scope(VFP3);
+    CpuFeatures::Scope scope(VFP2);
     __ vstr(d0,
             FieldMemOperand(heap_number_result, HeapNumber::kValueOffset));
   } else {
@@ -1370,7 +1370,7 @@ static void EmitTwoNonNanDoubleComparison(MacroAssembler* masm,
     __ push(lr);
     __ PrepareCallCFunction(0, 2, r5);
     if (masm->use_eabi_hardfloat()) {
-      CpuFeatures::Scope scope(VFP3);
+      CpuFeatures::Scope scope(VFP2);
       __ vmov(d0, r0, r1);
       __ vmov(d1, r2, r3);
     }
@@ -3428,7 +3428,7 @@ void TranscendentalCacheStub::GenerateCallCFunction(MacroAssembler* masm,
 
   __ push(lr);
   __ PrepareCallCFunction(0, 1, scratch);
-  if (masm->use_eabi_hardfloat()) {
+  if (masm->use_eabi_hardfloat() && CpuFeatures::IsSupported(VFP3)) {
     __ vmov(d0, d2);
   } else {
     __ vmov(r0, r1, d2);
diff --git a/src/3rdparty/v8/src/arm/macro-assembler-arm.cc b/src/3rdparty/v8/src/arm/macro-assembler-arm.cc
index 4da2fec..7a3ed33 100644
--- a/src/3rdparty/v8/src/arm/macro-assembler-arm.cc
+++ b/src/3rdparty/v8/src/arm/macro-assembler-arm.cc
@@ -930,7 +930,7 @@ void MacroAssembler::LeaveExitFrame(bool save_doubles,
 }
 
 void MacroAssembler::GetCFunctionDoubleResult(const DoubleRegister dst) {
-  if (use_eabi_hardfloat()) {
+  if (use_eabi_hardfloat() && CpuFeatures::IsSupported(VFP3)) {
     Move(dst, d0);
   } else {
     vmov(dst, r0, r1);
@@ -3313,7 +3313,7 @@ void MacroAssembler::PrepareCallCFunction(int num_reg_arguments,
 
 
 void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg) {
-  if (use_eabi_hardfloat()) {
+  if (use_eabi_hardfloat() && CpuFeatures::IsSupported(VFP3)) {
     Move(d0, dreg);
   } else {
     vmov(r0, r1, dreg);
@@ -3323,7 +3323,7 @@ void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg) {
 
 void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg1,
                                              DoubleRegister dreg2) {
-  if (use_eabi_hardfloat()) {
+  if (use_eabi_hardfloat() && CpuFeatures::IsSupported(VFP3)) {
     if (dreg2.is(d0)) {
       ASSERT(!dreg1.is(d1));
       Move(d1, dreg2);
@@ -3341,7 +3341,7 @@ void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg1,
 
 void MacroAssembler::SetCallCDoubleArguments(DoubleRegister dreg,
                                              Register reg) {
-  if (use_eabi_hardfloat()) {
+  if (use_eabi_hardfloat() && CpuFeatures::IsSupported(VFP3)) {
     Move(d0, dreg);
     Move(r0, reg);
   } else {
diff --git a/src/3rdparty/v8/src/v8globals.h b/src/3rdparty/v8/src/v8globals.h
index 6a1766a..1868b91 100644
--- a/src/3rdparty/v8/src/v8globals.h
+++ b/src/3rdparty/v8/src/v8globals.h
@@ -442,6 +442,7 @@ enum CpuFeature { SSE4_1 = 32 + 19,  // x86
                   CPUID = 10,  // x86
                   VFP3 = 1,    // ARM
                   ARMv7 = 2,   // ARM
+                  VFP2 = 4,    // ARM
                   SAHF = 0,    // x86
                   FPU = 1};    // MIPS
 
diff --git a/src/v8/v8.pri b/src/v8/v8.pri
index 45beffc..07d8fb6 100644
--- a/src/v8/v8.pri
+++ b/src/v8/v8.pri
@@ -153,12 +153,17 @@ equals(V8_TARGET_ARCH, arm) {
 DEFINES += V8_TARGET_ARCH_ARM
 config_hardfloat {
     DEFINES += USE_EABI_HARDFLOAT=1
+    config_vfp3 {
+        DEFINES += CAN_USE_VFP3_INSTRUCTIONS
+        DEFINES += CAN_USE_VFP2_INSTRUCTIONS
+    }
+    config_vfp2 {
+        DEFINES += CAN_USE_VFP2_INSTRUCTIONS
+    }
 } else {
     DEFINES += USE_EABI_HARDFLOAT=0
 }
-# Disable VFP3 until we add an option to configure
-# QTBUG-24760
-false:DEFINES += CAN_USE_VFP_INSTRUCTIONS
+
 SOURCES += \
     $$V8SRC/arm/builtins-arm.cc \
     $$V8SRC/arm/code-stubs-arm.cc \
diff --git a/sync.profile b/sync.profile
index 05b86d2..e71ca59 100644
--- a/sync.profile
+++ b/sync.profile
@@ -17,3 +17,10 @@
 %dependencies = (
         "qtbase" => "refs/heads/master",
 );
+
+# compile tests
+%configtests = (
+    "hardfloat" => {},
+    "vfp3" => {},
+    "vfp2" => {},
+);
-- 
1.7.12.2

